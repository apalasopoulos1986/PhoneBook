
@model PhoneBook.Data.Entities.Location



<style>
    #map {
        height: 100%;
    }

    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>
<br />
<br />

<div style="width:100%; text-align:center;">
    <h3>Καταχώρησε πρώτα τα στοιχεία της κατοικίας του</h3>
    <input id="searchInput" type="text" placeholder="Enter a location" style="width:650px; max-width:650px; height:45px; margin-top: 15px; padding:15px;">
</div>





@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.AddressName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddressName, new { htmlAttributes = new { placeholder = "Διεύθυνση", autocomplete = "off", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AddressName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.No, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.No, new { htmlAttributes = new { placeholder = "Αριθμός", autocomplete = "off", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { placeholder = "Ταχυδρομικός κώδικας", autocomplete = "off", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { placeholder = "Latitude", autocomplete = "off", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { placeholder = "Longitude", autocomplete = "off", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Area, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Area, new { htmlAttributes = new { placeholder = "Περιοχή", autocomplete = "off", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { placeholder = "Πόλη", autocomplete = "off", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Next" class="btn btn-default" />
            </div>
        </div>
    </div>
}





<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places&key=AIzaSyA_JBPxwkVnDXnNZRqKGSvgE-K5ABM29YI&callback=initMap" async defer></script>

<script>


    function initMap() {

        var input = document.getElementById('searchInput');
        var autocomplete = new google.maps.places.Autocomplete(input);

        autocomplete.addListener('place_changed', function () {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }
            console.log(place);
            document.getElementById("AddressName").value = place.address_components[1].long_name;
            document.getElementById("No").value = place.address_components[0].long_name;
            document.getElementById("Latitude").value = place.geometry.location.lat();
            document.getElementById("Longitude").value = place.geometry.location.lng();
            document.getElementById("ZipCode").value = place.address_components[5].long_name;
            document.getElementById("City").value = place.address_components[3].long_name;
            //document.getElementById("State").value = place.address_components[5].long_name;
            document.getElementById("Area").value = place.address_components[2].long_name;

        });
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places&key=AIzaSyA_JBPxwkVnDXnNZRqKGSvgE-K5ABM29YI&callback=initMap" async defer></script>


